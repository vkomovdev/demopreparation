@using DietPreparation.Common.Enums
@using DietPreparation.Common.Extensions
@using DietPreparation.Resources

@model DietPreparation.Web.Models.DietRequests.EditDietRequestViewModel

@Html.AntiForgeryToken()

<section class="row static-table">
	<div class="col-md-12">
		@await Html.PartialAsync("~/Views/DietRequest/CreateEdit/_DeliveryPartial.cshtml", Model)
		<hr />
	</div>
</section>

<section class="row static-table">
	<div class="col-md-12">
		@await Html.PartialAsync("~/Views/DietRequest/CreateEdit/_DietPartial.cshtml", Model)
		<hr />
	</div>
</section>

<section class="row static-table">
	<div class="col-md-12">
		@await Html.PartialAsync("~/Views/DietRequest/CreateEdit/_ProcessingInstructionsPartial.cshtml", Model)
		<hr />
	</div>
</section>

<section class="row dynamic-table" id="premix-section">
	<div class="col-md-12">
		<div class="section-head">
			@Html.CheckBoxFor(x => x.HasPremixes, new { @class = "form-check-input", id = "premix-switch", role = "switch" })
			@Html.LabelFor(x => x.HasPremixes, $"{ContentResources.MedicatedPreMix} {ContentResources.Section}", new { @class = "form-check-label", @for = "premix-switch" })
		</div>
		<div class="section-body">
			@await Html.PartialAsync("~/Views/DietRequest/CreateEdit/_PremixPartial.cshtml", Model)
		</div>
		<hr />
	</div>
</section>

<section class="row dynamic-table" id="drug-section">
	<div class="col-md-12">
		<div class="section-head">
			@Html.CheckBoxFor(x => x.HasDrugs, new { @class = "form-check-input", id = "drug-switch", role = "switch" })
			@Html.LabelFor(x => x.HasDrugs, $"{ContentResources.Drug} {ContentResources.Section}", new { @class = "form-check-label", @for = "drug-switch" })
		</div>
		<div class="section-body">
			@await Html.PartialAsync("~/Views/DietRequest/CreateEdit/_DrugPartial.cshtml", Model)
		</div>
		<hr />
	</div>
</section>

<section class="row dynamic-table" id="sample-section">
	<div class="col-md-12">
		<div class="section-head">
			@Html.CheckBoxFor(x => x.HasSamples, new { @class = "form-check-input", id = "sample-switch", role = "switch" })
			@Html.LabelFor(x => x.HasSamples, $"{ContentResources.Sample} {ContentResources.Section}", new { @class = "form-check-label", @for = "sample-switch" })
		</div>
		<div class="section-body">
			@await Html.PartialAsync("~/Views/DietRequest/CreateEdit/_SamplePartial.cshtml", Model)
		</div>
		<hr />
	</div>
</section>

<section class="row static-table">
	<div class="col-md-12">
		<h4>@Html.LabelFor(x => x.GeneralComment, ContentResources.Comment, new { @class = "form-label" })</h4>
		@Html.TextAreaFor(
			x => x.GeneralComment,
			new {
				@class = "form-control",
				rows = "3",
				maxlength = "2000"
			})
	</div>
</section>

<section class="row print-checkbox">
	<div class="col-md-12">
		<div class="section-body">
			@Html.CheckBoxFor(x => x.PrintAfterSave, new { @class = "form-check-input", id = "print-checkbox" })
			<label class="form-check-label" for="print-checkbox">
				<i data-feather="printer" class="print-icon"></i> @ContentResources.Print
			</label>
		</div>
	</div>
</section>

<script type="module">
	import SectionToggleHeadClick from '@Url.Content("~/scripts/components/section-toggle-head-click.js")';
	import SectionToggle from '@Url.Content("~/scripts/components/section-toggle.js")';
	import DynamicTable from '@Url.Content("~/scripts/components/dynamic-table.js")';
	import RequiredFieldHelper from '@Url.Content("~/scripts/helpers/required-field-helper.js")';
	import MinMaxFieldHelper from '@Url.Content("~/scripts/helpers/min-max-field-helper.js")';
	import FeedTypeHandler from '@Url.Content("~/scripts/dietrequests/feed-type-handler.js")';
	import RequestTypeHandler from '@Url.Content("~/scripts/dietrequests/request-type-handler.js")';
	import ToxicHazardHandler from '@Url.Content("~/scripts/dietrequests/toxic-hazard-handler.js")';
	import DrugSelectHandler from '@Url.Content("~/scripts/dietrequests/drug-select-handler.js")';

	$(document).ready(function () {
		const sectionToggleHeadClick = new SectionToggleHeadClick('.section-head');
		const sectionPremixToggle = new SectionToggle('premix-switch', '#premix-section .section-body');
		const sectionDrugToggle = new SectionToggle('drug-switch', '#drug-section .section-body');
		const sectionSampleToggle = new SectionToggle("sample-switch", '#sample-section .section-body');

		const feedTypeHandler = new FeedTypeHandler('base-feed-type-select', 'external-feed-row', 'basal-diet-row', '@FeedType.Basal.GetNumberAsString()', '@FeedType.External.GetNumberAsString()');
		const requestTypeHandler = new RequestTypeHandler('request-type-select', 'premix-section', '@RequestType.MedicatedPremix.GetNumberAsString()');

		const toxicHazardHandler = new ToxicHazardHandler('@HazardType.Known.GetNumberAsString()');
		
		const drugSelectHandler = new DrugSelectHandler('drug-select', 'data-concentration', 'drug-concentration-input');

		const dynamicTableIds = ['premix-table', 'drug-table', 'sample-table'];
		dynamicTableIds.forEach((tableId) => {
			const table = $(`#${tableId}`);
			const tBody = table.find('> tbody')[0];
			const templateRow = table.find('> tfoot > tr.template')[0];
			const inputRow = table.find('> tfoot > tr.add')[0];
			const addRowButton = table.find('> tfoot > tr.add > td > input.add-row')[0];
			const removeRowButtonClass = 'remove-row';
			
			const dynamicTable = new DynamicTable(tBody, templateRow, inputRow, addRowButton, removeRowButtonClass);
		});
	});
</script>